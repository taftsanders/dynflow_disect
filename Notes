 In [41]: soup.body.p.contents[2].strip()                                                                                                                                    
Out[41]: '58e3e569-6bd6-4474-8000-3fe515535fc8'
     1        <html>
     2        <head>
     3        <title>Dynflow Console</title>
     4        <script src="jquery.js"></script>
     5        <link rel="stylesheet" type="text/css" href="bootstrap.css">
     6        <link rel="stylesheet" type="text/css" href="application.css">
     7        <script src="bootstrap.js"></script>
     8        <script src="run_prettify.js"></script>
     9        <script src="application.js"></script>
    10        </head>
    11        <body>
    12           <p>
    13   <b>Id:</b>
    14   58e3e569-6bd6-4474-8000-3fe515535fc8
    15 </p>
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# Get all plan actions:
soup.body.find_all('ul')
[0] plan/run/finalize tabs
[1] ALL tasks (because each list item is nested in this list)
[2] first list item
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
In [60]: soup.body.find_all('ul')[1215]                                                                                                                                     
Out[60]: 
<ul class="plan-step">
<li>
<p class="step-label">
<span class="label label-success">Actions::Pulp::Consumer::SyncCapsule</span>
</p>
<div class="action">
<p><b>Started at:</b> 2020-10-23 17:49:42 UTC</p>
<p><b>Ended at:</b> 2020-10-23 17:49:42 UTC (duration 0.00s)</p>
<p>
<b>Input:</b>
<pre class="prettyprint lang-yaml">---
capsule_id: 5
repo_pulp_id: 1-RHEL7-QA-576308ed-02ac-47d7-b19e-f1eaab2adc37
sync_options:
  remove_missing: true
remote_user: admin
remote_cp_user: admin
current_timezone: UTC
current_user_id: 3
current_organization_id: 
current_location_id: 
</pre>
</p>
</div>
</li>
</ul>
In [63]: soup.body.find_all('ul')[1215].span.string                                                                                                                         
Out[63]: 'Actions::Pulp::Consumer::SyncCapsule'

In [72]: soup.body.find_all('ul')[1215].find_all('p')[1].contents
Out[72]: [<b>Started at:</b>, ' 2020-10-23 17:49:42 UTC']

In [87]: soup.body.find_all('ul')[1215].find_all('p')[2].contents                                                                                                           
Out[87]: [<b>Ended at:</b>, ' 2020-10-23 17:49:42 UTC (duration 0.00s)']

In [123]: soup.body.find_all('ul')[1215].pre                                                                                                                                
Out[123]: 
<pre class="prettyprint lang-yaml">---
capsule_id: 5
repo_pulp_id: 1-RHEL7-QA-576308ed-02ac-47d7-b19e-f1eaab2adc37
sync_options:
  remove_missing: true
remote_user: admin
remote_cp_user: admin
current_timezone: UTC
current_user_id: 3
current_organization_id: 
current_location_id: 
</pre>

In [124]: for i in soup.body.find_all('ul')[1215].pre: 
     ...:     print(i.split().index('repo_pulp_id:')) 
     ...:                                                                                                                                                                   
3

CSV:
plan == dynflow_actions.csv
run == dynflow_steps.csv

Plan.html
soup.find_all('div')[0] = <div class="tab-content">
soup.find_all('div')[1] = <div class="tab-pane" id="plan">
soup.find_all('div')[181] = <div class="tab-pane active" id="run">
soup.find_all('div')[360] = <div class="tab-pane" id="finalize">
soup.find_all('div')[361] = <div class="tab-pane" id="execution-history">






>>> empty_dict = {}
>>> for x in each_task:
...     for key,value in x.items():
...         if key not in empty_dict.keys():
...             empty_dict[key] = [value]
...         else:
...             empty_dict[key].append(value)

